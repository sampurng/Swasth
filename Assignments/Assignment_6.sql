
-- DROPPING products table as per the recorded lecture
SET SERVEROUTPUT ON
/
DECLARE
    CURSOR CUR_CONSTRAINTS IS SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE TABLE_NAME IN ('PRODUCTS', 'SALES');
    CURSOR CUR_SEQ IS SELECT SEQUENCE_NAME FROM USER_SEQUENCES; 
    CURSOR CUR_TABLES IS SELECT TABLE_NAME FROM USER_TABLES;
    
    V_COUNT_SEQ NUMBER := 0;
    V_COUNT_CONSTRAINTS NUMBER := 0;
    V_COUNT_TABLES NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO V_COUNT_SEQ FROM USER_SEQUENCES; 
    SELECT COUNT(*) INTO V_COUNT_CONSTRAINTS FROM USER_CONSTRAINTS;
    SELECT COUNT(*) INTO V_COUNT_TABLES FROM USER_TABLES;
    
    DBMS_OUTPUT.PUT_LINE('Sequences Present : ' || V_COUNT_SEQ || chr(10) || 'Tables Present :  ' ||  V_COUNT_TABLES || chr(10) || 'Constraints Present : ' || V_COUNT_CONSTRAINTS);
    
    IF V_COUNT_SEQ > 0 THEN
        FOR SEQ IN CUR_SEQ LOOP
            EXECUTE IMMEDIATE ('DROP SEQUENCE ' || SEQ.SEQUENCE_NAME );
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('SEQUENCES DROPPED');
    END IF;
        
    IF V_COUNT_CONSTRAINTS > 0 THEN
        FOR CONS IN CUR_CONSTRAINTS LOOP
            DBMS_OUTPUT.PUT_LINE('ALTER TABLE ' || CONS.TABLE_NAME || ' DROP CONSTRAINT ' || CONS.CONSTRAINT_NAME);
            EXECUTE IMMEDIATE 'ALTER TABLE ' || CONS.TABLE_NAME || ' DROP CONSTRAINT ' || CONS.CONSTRAINT_NAME;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('CONSTRATINTS DROPPED');
    END IF;
       
    IF V_COUNT_TABLES > 0 THEN
        FOR TABLESS IN CUR_TABLES LOOP
            EXECUTE IMMEDIATE('DROP TABLE ' || TABLESS.TABLE_NAME);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('TABLES DROPPED');
    END IF;
END; 
/

-- CREATING TABLE
CREATE TABLE PRODUCTS (
    PID NUMBER PRIMARY KEY, 
    PNAME VARCHAR(100) UNIQUE NOT NULL,
    PRICE NUMBER(10, 2) DEFAULT 15.00,
    AVAILABLE_QTY NUMBER DEFAULT 10 NOT NULL,
    CREATED_BY VARCHAR(200) DEFAULT USER,
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- CREATING SALES
CREATE TABLE SALES(
    SID NUMBER PRIMARY KEY, 
    PID NUMBER REFERENCES PRODUCTS(PID) NOT NULL,
    SOLD_QTY NUMBER NOT NULL, 
    CREATED_BY VARCHAR(200) DEFAULT USER, 
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- CREATIGN SEQUENCES FOR PKs
CREATE SEQUENCE SEQ_PID; 
CREATE SEQUENCE SEQ_SID; 


--SELECT * FROM USER_TABLES;

-- CREATE PROC FOR ADDING PRODUCTS
CREATE OR REPLACE PROCEDURE ADD_PRODUCT(PI_NAME PRODUCTS.PNAME%TYPE, PI_PRICE PRODUCTS.PRICE%TYPE)
AS 
    E_INVALID_PRICE EXCEPTION;
BEGIN
    IF PI_PRICE < 1 THEN
        RAISE E_INVALID_PRICE;
    END IF;
    INSERT INTO PRODUCTS(PID, PNAME, PRICE) VALUES (SEQ_PID.NEXTVAL, PI_NAME, PI_PRICE); 
EXCEPTION 
    WHEN E_INVALID_PRICE THEN
        DBMS_OUTPUT.PUT_LINE('INVALID PRICE');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_PRODUCT;
/

-- CREATE PROC FOR ADDING SALES
CREATE OR REPLACE PROCEDURE ADD_SALE(PI_PRODUCT_NAME PRODUCTS.PNAME%TYPE, PI_PURCHASE_QTY SALES.SOLD_QTY%TYPE)
AS 
    E_INVALID_QUANTITY EXCEPTION;
    E_OUT_OF_INVENTORY EXCEPTION;
    V_PID PRODUCTS.PID%TYPE;
    V_QTY_PRESENT SALES.SOLD_QTY%TYPE;
BEGIN
    SELECT PID INTO V_PID FROM PRODUCTS WHERE PNAME = PI_PRODUCT_NAME;
    SELECT AVAILABLE_QTY INTO V_QTY_PRESENT FROM PRODUCTS WHERE PNAME  = PI_PRODUCT_NAME;
    
    IF PI_PURCHASE_QTY > V_QTY_PRESENT THEN
        RAISE E_OUT_OF_INVENTORY;
    END IF;
    IF PI_PURCHASE_QTY < 1 THEN
        RAISE E_INVALID_QUANTITY;
    END IF;
    
    INSERT INTO SALES(SID, PID, SOLD_QTY) VALUES (SEQ_SID.NEXTVAL, V_PID, PI_PURCHASE_QTY); 
    -- UPDATING AVAILABLE QTY AS SALE IS SUCCESSFULL
    UPDATE PRODUCTS SET AVAILABLE_QTY = V_QTY_PRESENT - PI_PURCHASE_QTY WHERE PID = V_PID;
    -- DBMS_OUTPUT.PUT_LINE('QUANTITY LEFT FOR ' ||  PI_PRODUCT_NAME || ' IS : ' || V_QTY_PRESENT - PI_PURCHASE_QTY);
EXCEPTION 
    WHEN E_OUT_OF_INVENTORY THEN
        DBMS_OUTPUT.PUT_LINE('REQUIRED QUANTITIES NOT PRESENT IN INVETORY');
    WHEN E_INVALID_QUANTITY THEN
        DBMS_OUTPUT.PUT_LINE('IVALID QUANTITY');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_SALE;
/


--CHECKING IF THE STORED PROC IS THERE OR NOT
--SELECT * FROM USER_SOURCE;
-- select * from user_constraints;

EXEC ADD_PRODUCT('PIZZA' , 13.45);

EXEC ADD_SALE('PIZZA', 8);

SELECT * FROM PRODUCTS;

