SET SERVEROUTPUT ON
/
CREATE OR REPLACE PROCEDURE ROLE_CREATION_PROCEDURE AS
    CURSOR CUR_ROLES IS SELECT ROLE FROM DBA_ROLES WHERE ROLE LIKE 'SWASTH_%';
    CURSOR CUR_USERS IS SELECT USERNAME FROM DBA_USERS WHERE USERNAME IN ('SCLIENT', 'SEVENTMANAGER', 'SADMIN');
    CURSOR CUR_SESSIONS IS SELECT SID, SERIAL# FROM v$session WHERE username != 'ADMIN';
    V_COUNT_ROLES NUMBER;
    V_COUNT_USERS NUMBER;
    V_COUNT_SESSIONS NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT_ROLES FROM DBA_ROLES WHERE ROLE LIKE 'SWASTH_%';
    DBMS_OUTPUT.PUT_LINE('Roles Present : ' || V_COUNT_ROLES);
    
    SELECT COUNT(*) INTO V_COUNT_USERS FROM DBA_USERS WHERE USERNAME IN ('SCLIENT', 'SEVENTMANAGER', 'SADMIN');
    DBMS_OUTPUT.PUT_LINE('Users Present : ' || V_COUNT_USERS);

    SELECT COUNT(*) INTO V_COUNT_SESSIONS FROM v$session WHERE USERNAME != 'Admin';
    
    IF V_COUNT_SESSIONs > 0 THEN
        FOR SESS IN CUR_SESSIONS LOOP
            EXECUTE IMMEDIATE ('ALTER SYSTEM KILL SESSION ''' || SESS.sid || ',' || SESS.serial# ||''' IMMEDIATE' );
        END LOOP;
    END IF;
    
    IF V_COUNT_ROLES > 0 THEN
        FOR ROL IN CUR_ROLES LOOP
            EXECUTE IMMEDIATE ('DROP ROLE ' || ROL.ROLE); 
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('ROLES DROPPED');
    END IF;
    
    IF V_COUNT_USERS > 0 THEN 
        FOR USR IN CUR_USERS LOOP
            EXECUTE IMMEDIATE ('DROP USER ' || USR.USERNAME || ' CASCADE' );
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('USERS DROPPED');
    END IF;
    
    
END;
/
EXECUTE ROLE_CREATION_PROCEDURE;
/
CREATE ROLE SWASTH_ADMIN;

-- Granting permissions for SWASTH_ADMIN role
GRANT CREATE SESSION TO SWASTH_ADMIN;
GRANT CONNECT TO SWASTH_ADMIN;

GRANT INSERT, UPDATE, DELETE ON user_details TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON sleep_details TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON sleep_metrics TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON exercise_details TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON exercise_metrics TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON health_details TO SWASTH_ADMIN;
GRANT INSERT, UPDATE, DELETE ON body_composition TO SWASTH_ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON user_details TO SWASTH_ADMIN;
CREATE USER sadmin IDENTIFIED BY SwasthGroupProject1;
GRANT SWASTH_ADMIN TO sadmin; 



CREATE ROLE SWASTH_EVENT_MANAGER;
-- Granting permissions for SWASTH_EVENT_MANAGER role
GRANT CREATE SESSION TO SWASTH_EVENT_MANAGER;
GRANT CONNECT TO SWASTH_EVENT_MANAGER;

GRANT SELECT ON activities_view TO SWASTH_EVENT_MANAGER;

-- Creating user for event manager
CREATE USER seventmanager IDENTIFIED BY SwasthGroupProject1;
GRANT SWASTH_EVENT_MANAGER TO seventmanager; 


CREATE ROLE SWASTH_CLIENT;

-- Granting access to views
GRANT CREATE SESSION TO SWASTH_CLIENT;
GRANT CONNECT TO SWASTH_CLIENT;

GRANT SELECT ON health_progress_view TO SWASTH_CLIENT;
GRANT SELECT ON exercise_view TO SWASTH_CLIENT;
GRANT SELECT ON sleep_view TO SWASTH_CLIENT;
GRANT SELECT ON activities_view TO SWASTH_CLIENT;

-- EXECUTE IMMEDIATE 'GRANT SELECT ON user_overview TO SWASTH_CLIENT';
CREATE USER sclient IDENTIFIED BY SwasthGroupProject1;
GRANT SWASTH_CLIENT TO sclient; 
/

--DROP USER SCLIENT;
--DROP USER SEVENTMANAGER;
--DROP USER SADMIN;
--SELECT * FROM DBA_USERS;
--DROP USER sADMIN;
--DROP USER SEVENTMANAGER CASCADE;
Commit;

--SELECT * FROM activities_view;
--GRANT SWASTH_ADMIN to sadmin;

--GRANT SWASTh_EVENT_MANAGER to seventmanager;

--GRANT SWASTH_CLIENT TO sclient;

--SELECT grantee, privilege, table_name FROM ALL_TAB_PRIVS WHERE GRANTEE = 'SADMIN';

--Grant select, update, insert, delete on activities_view to seventmanager;

--GRANT 

SELECT * from v$session;



